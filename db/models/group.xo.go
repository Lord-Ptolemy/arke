// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/lib/pq"
)

// Group represents a row from 'public.groups'.
type Group struct {
	Snowflake  int64         `json:"snowflake"`  // snowflake
	CreatedAt  *time.Time    `json:"created_at"` // created_at
	DeletedAt  pq.NullTime   `json:"deleted_at"` // deleted_at
	Name       string        `json:"name"`       // name
	Permission []byte        `json:"permission"` // permission
	ParentID   sql.NullInt64 `json:"parent_id"`  // parent_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Group exists in the database.
func (g *Group) Exists() bool {
	return g._exists
}

// Deleted provides information if the Group has been deleted from the database.
func (g *Group) Deleted() bool {
	return g._deleted
}

// Insert inserts the Group to the database.
func (g *Group) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.groups (` +
		`snowflake, created_at, deleted_at, name, permission, parent_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`

	// run query
	XOLog(sqlstr, g.Snowflake, g.CreatedAt, g.DeletedAt, g.Name, g.Permission, g.ParentID)
	err = db.QueryRow(sqlstr, g.Snowflake, g.CreatedAt, g.DeletedAt, g.Name, g.Permission, g.ParentID).Scan(&g.Snowflake)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Group in the database.
func (g *Group) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.groups SET (` +
		`created_at, deleted_at, name, permission, parent_id` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE snowflake = $6`

	// run query
	XOLog(sqlstr, g.CreatedAt, g.DeletedAt, g.Name, g.Permission, g.ParentID, g.Snowflake)
	_, err = db.Exec(sqlstr, g.CreatedAt, g.DeletedAt, g.Name, g.Permission, g.ParentID, g.Snowflake)
	return err
}

// Save saves the Group to the database.
func (g *Group) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Group.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Group) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.groups (` +
		`snowflake, created_at, deleted_at, name, permission, parent_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (snowflake) DO UPDATE SET (` +
		`snowflake, created_at, deleted_at, name, permission, parent_id` +
		`) = (` +
		`EXCLUDED.snowflake, EXCLUDED.created_at, EXCLUDED.deleted_at, EXCLUDED.name, EXCLUDED.permission, EXCLUDED.parent_id` +
		`)`

	// run query
	XOLog(sqlstr, g.Snowflake, g.CreatedAt, g.DeletedAt, g.Name, g.Permission, g.ParentID)
	_, err = db.Exec(sqlstr, g.Snowflake, g.CreatedAt, g.DeletedAt, g.Name, g.Permission, g.ParentID)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Group from the database.
func (g *Group) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.groups WHERE snowflake = $1`

	// run query
	XOLog(sqlstr, g.Snowflake)
	_, err = db.Exec(sqlstr, g.Snowflake)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// Group returns the Group associated with the Group's ParentID (parent_id).
//
// Generated from foreign key 'groups_parent_id_fkey'.
func (g *Group) Group(db XODB) (*Group, error) {
	return GroupBySnowflake(db, g.ParentID.Int64)
}

// GroupsByName retrieves a row from 'public.groups' as a Group.
//
// Generated from index 'groups_name_index'.
func GroupsByName(db XODB, name string) ([]*Group, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, name, permission, parent_id ` +
		`FROM public.groups ` +
		`WHERE name = $1`

	// run query
	XOLog(sqlstr, name)
	q, err := db.Query(sqlstr, name)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Group{}
	for q.Next() {
		g := Group{
			_exists: true,
		}

		// scan
		err = q.Scan(&g.Snowflake, &g.CreatedAt, &g.DeletedAt, &g.Name, &g.Permission, &g.ParentID)
		if err != nil {
			return nil, err
		}

		res = append(res, &g)
	}

	return res, nil
}

// GroupByName retrieves a row from 'public.groups' as a Group.
//
// Generated from index 'groups_name_key'.
func GroupByName(db XODB, name string) (*Group, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, name, permission, parent_id ` +
		`FROM public.groups ` +
		`WHERE name = $1`

	// run query
	XOLog(sqlstr, name)
	g := Group{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&g.Snowflake, &g.CreatedAt, &g.DeletedAt, &g.Name, &g.Permission, &g.ParentID)
	if err != nil {
		return nil, err
	}

	return &g, nil
}

// GroupsByParentID retrieves a row from 'public.groups' as a Group.
//
// Generated from index 'groups_parent_index'.
func GroupsByParentID(db XODB, parentID sql.NullInt64) ([]*Group, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, name, permission, parent_id ` +
		`FROM public.groups ` +
		`WHERE parent_id = $1`

	// run query
	XOLog(sqlstr, parentID)
	q, err := db.Query(sqlstr, parentID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Group{}
	for q.Next() {
		g := Group{
			_exists: true,
		}

		// scan
		err = q.Scan(&g.Snowflake, &g.CreatedAt, &g.DeletedAt, &g.Name, &g.Permission, &g.ParentID)
		if err != nil {
			return nil, err
		}

		res = append(res, &g)
	}

	return res, nil
}

// GroupBySnowflake retrieves a row from 'public.groups' as a Group.
//
// Generated from index 'groups_pkey'.
func GroupBySnowflake(db XODB, snowflake int64) (*Group, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, name, permission, parent_id ` +
		`FROM public.groups ` +
		`WHERE snowflake = $1`

	// run query
	XOLog(sqlstr, snowflake)
	g := Group{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, snowflake).Scan(&g.Snowflake, &g.CreatedAt, &g.DeletedAt, &g.Name, &g.Permission, &g.ParentID)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
