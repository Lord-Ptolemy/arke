// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/lib/pq"
)

// Topic represents a row from 'public.topics'.
type Topic struct {
	Snowflake int64         `json:"snowflake"`  // snowflake
	CreatedAt *time.Time    `json:"created_at"` // created_at
	DeletedAt pq.NullTime   `json:"deleted_at"` // deleted_at
	AuthorID  sql.NullInt64 `json:"author_id"`  // author_id
	Title     string        `json:"title"`      // title
	Body      string        `json:"body"`       // body
	Revision  int64         `json:"revision"`   // revision

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Topic exists in the database.
func (t *Topic) Exists() bool {
	return t._exists
}

// Deleted provides information if the Topic has been deleted from the database.
func (t *Topic) Deleted() bool {
	return t._deleted
}

// Insert inserts the Topic to the database.
func (t *Topic) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.topics (` +
		`snowflake, snowflake, created_at, deleted_at, author_id, title, body, revision` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`

	// run query
	XOLog(sqlstr, t.Snowflake, t.Snowflake, t.CreatedAt, t.DeletedAt, t.AuthorID, t.Title, t.Body, t.Revision)
	err = db.QueryRow(sqlstr, t.Snowflake, t.Snowflake, t.CreatedAt, t.DeletedAt, t.AuthorID, t.Title, t.Body, t.Revision).Scan(&t.Snowflake)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Update updates the Topic in the database.
func (t *Topic) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.topics SET (` +
		`created_at, deleted_at, author_id, title, body, revision` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE snowflake = $7`

	// run query
	XOLog(sqlstr, t.CreatedAt, t.DeletedAt, t.AuthorID, t.Title, t.Body, t.Revision, t.Snowflake)
	_, err = db.Exec(sqlstr, t.CreatedAt, t.DeletedAt, t.AuthorID, t.Title, t.Body, t.Revision, t.Snowflake)
	return err
}

// Save saves the Topic to the database.
func (t *Topic) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Upsert performs an upsert for Topic.
//
// NOTE: PostgreSQL 9.5+ only
func (t *Topic) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.topics (` +
		`snowflake, snowflake, created_at, deleted_at, author_id, title, body, revision` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (snowflake) DO UPDATE SET (` +
		`snowflake, snowflake, created_at, deleted_at, author_id, title, body, revision` +
		`) = (` +
		`EXCLUDED.snowflake, EXCLUDED.snowflake, EXCLUDED.created_at, EXCLUDED.deleted_at, EXCLUDED.author_id, EXCLUDED.title, EXCLUDED.body, EXCLUDED.revision` +
		`)`

	// run query
	XOLog(sqlstr, t.Snowflake, t.Snowflake, t.CreatedAt, t.DeletedAt, t.AuthorID, t.Title, t.Body, t.Revision)
	_, err = db.Exec(sqlstr, t.Snowflake, t.Snowflake, t.CreatedAt, t.DeletedAt, t.AuthorID, t.Title, t.Body, t.Revision)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Delete deletes the Topic from the database.
func (t *Topic) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.topics WHERE snowflake = $1`

	// run query
	XOLog(sqlstr, t.Snowflake)
	_, err = db.Exec(sqlstr, t.Snowflake)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// User returns the User associated with the Topic's AuthorID (author_id).
//
// Generated from foreign key 'topics_author_id_fkey'.
func (t *Topic) User(db XODB) (*User, error) {
	return UserBySnowflake(db, t.AuthorID.Int64)
}

// TopicsByAuthorID retrieves a row from 'public.topics' as a Topic.
//
// Generated from index 'topics_author_index'.
func TopicsByAuthorID(db XODB, authorID sql.NullInt64) ([]*Topic, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, snowflake, created_at, deleted_at, author_id, title, body, revision ` +
		`FROM public.topics ` +
		`WHERE author_id = $1`

	// run query
	XOLog(sqlstr, authorID)
	q, err := db.Query(sqlstr, authorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Topic{}
	for q.Next() {
		t := Topic{
			_exists: true,
		}

		// scan
		err = q.Scan(&t.Snowflake, &t.Snowflake, &t.CreatedAt, &t.DeletedAt, &t.AuthorID, &t.Title, &t.Body, &t.Revision)
		if err != nil {
			return nil, err
		}

		res = append(res, &t)
	}

	return res, nil
}

// TopicsBySnowflakeRevision retrieves a row from 'public.topics' as a Topic.
//
// Generated from index 'topics_id_revision_index'.
func TopicsBySnowflakeRevision(db XODB, snowflake int64, revision int64) ([]*Topic, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, snowflake, created_at, deleted_at, author_id, title, body, revision ` +
		`FROM public.topics ` +
		`WHERE snowflake = $1 AND revision = $2`

	// run query
	XOLog(sqlstr, snowflake, revision)
	q, err := db.Query(sqlstr, snowflake, revision)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Topic{}
	for q.Next() {
		t := Topic{
			_exists: true,
		}

		// scan
		err = q.Scan(&t.Snowflake, &t.Snowflake, &t.CreatedAt, &t.DeletedAt, &t.AuthorID, &t.Title, &t.Body, &t.Revision)
		if err != nil {
			return nil, err
		}

		res = append(res, &t)
	}

	return res, nil
}

// TopicBySnowflake retrieves a row from 'public.topics' as a Topic.
//
// Generated from index 'topics_pkey'.
func TopicBySnowflake(db XODB, snowflake int64) (*Topic, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, snowflake, created_at, deleted_at, author_id, title, body, revision ` +
		`FROM public.topics ` +
		`WHERE snowflake = $1`

	// run query
	XOLog(sqlstr, snowflake)
	t := Topic{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, snowflake).Scan(&t.Snowflake, &t.Snowflake, &t.CreatedAt, &t.DeletedAt, &t.AuthorID, &t.Title, &t.Body, &t.Revision)
	if err != nil {
		return nil, err
	}

	return &t, nil
}

// TopicsByRevision retrieves a row from 'public.topics' as a Topic.
//
// Generated from index 'topics_revision_index'.
func TopicsByRevision(db XODB, revision int64) ([]*Topic, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, snowflake, created_at, deleted_at, author_id, title, body, revision ` +
		`FROM public.topics ` +
		`WHERE revision = $1`

	// run query
	XOLog(sqlstr, revision)
	q, err := db.Query(sqlstr, revision)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Topic{}
	for q.Next() {
		t := Topic{
			_exists: true,
		}

		// scan
		err = q.Scan(&t.Snowflake, &t.Snowflake, &t.CreatedAt, &t.DeletedAt, &t.AuthorID, &t.Title, &t.Body, &t.Revision)
		if err != nil {
			return nil, err
		}

		res = append(res, &t)
	}

	return res, nil
}

// TopicBySnowflakeRevision retrieves a row from 'public.topics' as a Topic.
//
// Generated from index 'topics_snowflake_revision_key'.
func TopicBySnowflakeRevision(db XODB, snowflake int64, revision int64) (*Topic, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, snowflake, created_at, deleted_at, author_id, title, body, revision ` +
		`FROM public.topics ` +
		`WHERE snowflake = $1 AND revision = $2`

	// run query
	XOLog(sqlstr, snowflake, revision)
	t := Topic{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, snowflake, revision).Scan(&t.Snowflake, &t.Snowflake, &t.CreatedAt, &t.DeletedAt, &t.AuthorID, &t.Title, &t.Body, &t.Revision)
	if err != nil {
		return nil, err
	}

	return &t, nil
}
