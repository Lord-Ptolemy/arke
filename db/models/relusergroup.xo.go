// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"

	"github.com/lib/pq"
)

// RelUserGroup represents a row from 'public.rel_user_groups'.
type RelUserGroup struct {
	UserID    int64       `json:"user_id"`    // user_id
	GroupID   int64       `json:"group_id"`   // group_id
	CreatedAt *time.Time  `json:"created_at"` // created_at
	DeletedAt pq.NullTime `json:"deleted_at"` // deleted_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RelUserGroup exists in the database.
func (rug *RelUserGroup) Exists() bool {
	return rug._exists
}

// Deleted provides information if the RelUserGroup has been deleted from the database.
func (rug *RelUserGroup) Deleted() bool {
	return rug._deleted
}

// Insert inserts the RelUserGroup to the database.
func (rug *RelUserGroup) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if rug._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.rel_user_groups (` +
		`user_id, group_id, created_at, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, rug.UserID, rug.GroupID, rug.CreatedAt, rug.DeletedAt)
	err = db.QueryRow(sqlstr, rug.UserID, rug.GroupID, rug.CreatedAt, rug.DeletedAt).Scan(&rug.GroupID)
	if err != nil {
		return err
	}

	// set existence
	rug._exists = true

	return nil
}

// Update updates the RelUserGroup in the database.
func (rug *RelUserGroup) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rug._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if rug._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.rel_user_groups SET (` +
		`user_id, created_at, deleted_at` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE group_id = $4`

	// run query
	XOLog(sqlstr, rug.UserID, rug.CreatedAt, rug.DeletedAt, rug.GroupID)
	_, err = db.Exec(sqlstr, rug.UserID, rug.CreatedAt, rug.DeletedAt, rug.GroupID)
	return err
}

// Save saves the RelUserGroup to the database.
func (rug *RelUserGroup) Save(db XODB) error {
	if rug.Exists() {
		return rug.Update(db)
	}

	return rug.Insert(db)
}

// Upsert performs an upsert for RelUserGroup.
//
// NOTE: PostgreSQL 9.5+ only
func (rug *RelUserGroup) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if rug._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.rel_user_groups (` +
		`user_id, group_id, created_at, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (group_id) DO UPDATE SET (` +
		`user_id, group_id, created_at, deleted_at` +
		`) = (` +
		`EXCLUDED.user_id, EXCLUDED.group_id, EXCLUDED.created_at, EXCLUDED.deleted_at` +
		`)`

	// run query
	XOLog(sqlstr, rug.UserID, rug.GroupID, rug.CreatedAt, rug.DeletedAt)
	_, err = db.Exec(sqlstr, rug.UserID, rug.GroupID, rug.CreatedAt, rug.DeletedAt)
	if err != nil {
		return err
	}

	// set existence
	rug._exists = true

	return nil
}

// Delete deletes the RelUserGroup from the database.
func (rug *RelUserGroup) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rug._exists {
		return nil
	}

	// if deleted, bail
	if rug._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.rel_user_groups WHERE group_id = $1`

	// run query
	XOLog(sqlstr, rug.GroupID)
	_, err = db.Exec(sqlstr, rug.GroupID)
	if err != nil {
		return err
	}

	// set deleted
	rug._deleted = true

	return nil
}

// Group returns the Group associated with the RelUserGroup's GroupID (group_id).
//
// Generated from foreign key 'rel_user_groups_group_id_fkey'.
func (rug *RelUserGroup) Group(db XODB) (*Group, error) {
	return GroupBySnowflake(db, rug.GroupID)
}

// User returns the User associated with the RelUserGroup's UserID (user_id).
//
// Generated from foreign key 'rel_user_groups_user_id_fkey'.
func (rug *RelUserGroup) User(db XODB) (*User, error) {
	return UserBySnowflake(db, rug.UserID)
}

// RelUserGroupsByGroupID retrieves a row from 'public.rel_user_groups' as a RelUserGroup.
//
// Generated from index 'rel_user_groups_group_index'.
func RelUserGroupsByGroupID(db XODB, groupID int64) ([]*RelUserGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, group_id, created_at, deleted_at ` +
		`FROM public.rel_user_groups ` +
		`WHERE group_id = $1`

	// run query
	XOLog(sqlstr, groupID)
	q, err := db.Query(sqlstr, groupID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RelUserGroup{}
	for q.Next() {
		rug := RelUserGroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&rug.UserID, &rug.GroupID, &rug.CreatedAt, &rug.DeletedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &rug)
	}

	return res, nil
}

// RelUserGroupByUserIDGroupID retrieves a row from 'public.rel_user_groups' as a RelUserGroup.
//
// Generated from index 'rel_user_groups_pkey'.
func RelUserGroupByUserIDGroupID(db XODB, userID int64, groupID int64) (*RelUserGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, group_id, created_at, deleted_at ` +
		`FROM public.rel_user_groups ` +
		`WHERE user_id = $1 AND group_id = $2`

	// run query
	XOLog(sqlstr, userID, groupID)
	rug := RelUserGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userID, groupID).Scan(&rug.UserID, &rug.GroupID, &rug.CreatedAt, &rug.DeletedAt)
	if err != nil {
		return nil, err
	}

	return &rug, nil
}

// RelUserGroupsByUserID retrieves a row from 'public.rel_user_groups' as a RelUserGroup.
//
// Generated from index 'rel_user_groups_user_index'.
func RelUserGroupsByUserID(db XODB, userID int64) ([]*RelUserGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, group_id, created_at, deleted_at ` +
		`FROM public.rel_user_groups ` +
		`WHERE user_id = $1`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RelUserGroup{}
	for q.Next() {
		rug := RelUserGroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&rug.UserID, &rug.GroupID, &rug.CreatedAt, &rug.DeletedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &rug)
	}

	return res, nil
}
