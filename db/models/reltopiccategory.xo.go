// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"

	"github.com/lib/pq"
)

// RelTopicCategory represents a row from 'public.rel_topic_categories'.
type RelTopicCategory struct {
	TopicID    int64       `json:"topic_id"`    // topic_id
	CategoryID int64       `json:"category_id"` // category_id
	CreatedAt  *time.Time  `json:"created_at"`  // created_at
	DeletedAt  pq.NullTime `json:"deleted_at"`  // deleted_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RelTopicCategory exists in the database.
func (rtc *RelTopicCategory) Exists() bool {
	return rtc._exists
}

// Deleted provides information if the RelTopicCategory has been deleted from the database.
func (rtc *RelTopicCategory) Deleted() bool {
	return rtc._deleted
}

// Insert inserts the RelTopicCategory to the database.
func (rtc *RelTopicCategory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if rtc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.rel_topic_categories (` +
		`topic_id, category_id, created_at, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, rtc.TopicID, rtc.CategoryID, rtc.CreatedAt, rtc.DeletedAt)
	err = db.QueryRow(sqlstr, rtc.TopicID, rtc.CategoryID, rtc.CreatedAt, rtc.DeletedAt).Scan(&rtc.CategoryID)
	if err != nil {
		return err
	}

	// set existence
	rtc._exists = true

	return nil
}

// Update updates the RelTopicCategory in the database.
func (rtc *RelTopicCategory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rtc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if rtc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.rel_topic_categories SET (` +
		`topic_id, created_at, deleted_at` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE category_id = $4`

	// run query
	XOLog(sqlstr, rtc.TopicID, rtc.CreatedAt, rtc.DeletedAt, rtc.CategoryID)
	_, err = db.Exec(sqlstr, rtc.TopicID, rtc.CreatedAt, rtc.DeletedAt, rtc.CategoryID)
	return err
}

// Save saves the RelTopicCategory to the database.
func (rtc *RelTopicCategory) Save(db XODB) error {
	if rtc.Exists() {
		return rtc.Update(db)
	}

	return rtc.Insert(db)
}

// Upsert performs an upsert for RelTopicCategory.
//
// NOTE: PostgreSQL 9.5+ only
func (rtc *RelTopicCategory) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if rtc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.rel_topic_categories (` +
		`topic_id, category_id, created_at, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (category_id) DO UPDATE SET (` +
		`topic_id, category_id, created_at, deleted_at` +
		`) = (` +
		`EXCLUDED.topic_id, EXCLUDED.category_id, EXCLUDED.created_at, EXCLUDED.deleted_at` +
		`)`

	// run query
	XOLog(sqlstr, rtc.TopicID, rtc.CategoryID, rtc.CreatedAt, rtc.DeletedAt)
	_, err = db.Exec(sqlstr, rtc.TopicID, rtc.CategoryID, rtc.CreatedAt, rtc.DeletedAt)
	if err != nil {
		return err
	}

	// set existence
	rtc._exists = true

	return nil
}

// Delete deletes the RelTopicCategory from the database.
func (rtc *RelTopicCategory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rtc._exists {
		return nil
	}

	// if deleted, bail
	if rtc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.rel_topic_categories WHERE category_id = $1`

	// run query
	XOLog(sqlstr, rtc.CategoryID)
	_, err = db.Exec(sqlstr, rtc.CategoryID)
	if err != nil {
		return err
	}

	// set deleted
	rtc._deleted = true

	return nil
}

// Category returns the Category associated with the RelTopicCategory's CategoryID (category_id).
//
// Generated from foreign key 'rel_topic_categories_category_id_fkey'.
func (rtc *RelTopicCategory) Category(db XODB) (*Category, error) {
	return CategoryBySnowflake(db, rtc.CategoryID)
}

// Topic returns the Topic associated with the RelTopicCategory's TopicID (topic_id).
//
// Generated from foreign key 'rel_topic_categories_topic_id_fkey'.
func (rtc *RelTopicCategory) Topic(db XODB) (*Topic, error) {
	return TopicBySnowflake(db, rtc.TopicID)
}

// RelTopicCategoriesByCategoryID retrieves a row from 'public.rel_topic_categories' as a RelTopicCategory.
//
// Generated from index 'rel_topic_categories_category_index'.
func RelTopicCategoriesByCategoryID(db XODB, categoryID int64) ([]*RelTopicCategory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`topic_id, category_id, created_at, deleted_at ` +
		`FROM public.rel_topic_categories ` +
		`WHERE category_id = $1`

	// run query
	XOLog(sqlstr, categoryID)
	q, err := db.Query(sqlstr, categoryID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RelTopicCategory{}
	for q.Next() {
		rtc := RelTopicCategory{
			_exists: true,
		}

		// scan
		err = q.Scan(&rtc.TopicID, &rtc.CategoryID, &rtc.CreatedAt, &rtc.DeletedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &rtc)
	}

	return res, nil
}

// RelTopicCategoryByTopicIDCategoryID retrieves a row from 'public.rel_topic_categories' as a RelTopicCategory.
//
// Generated from index 'rel_topic_categories_pkey'.
func RelTopicCategoryByTopicIDCategoryID(db XODB, topicID int64, categoryID int64) (*RelTopicCategory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`topic_id, category_id, created_at, deleted_at ` +
		`FROM public.rel_topic_categories ` +
		`WHERE topic_id = $1 AND category_id = $2`

	// run query
	XOLog(sqlstr, topicID, categoryID)
	rtc := RelTopicCategory{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, topicID, categoryID).Scan(&rtc.TopicID, &rtc.CategoryID, &rtc.CreatedAt, &rtc.DeletedAt)
	if err != nil {
		return nil, err
	}

	return &rtc, nil
}

// RelTopicCategoriesByTopicID retrieves a row from 'public.rel_topic_categories' as a RelTopicCategory.
//
// Generated from index 'rel_topic_categories_topic_index'.
func RelTopicCategoriesByTopicID(db XODB, topicID int64) ([]*RelTopicCategory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`topic_id, category_id, created_at, deleted_at ` +
		`FROM public.rel_topic_categories ` +
		`WHERE topic_id = $1`

	// run query
	XOLog(sqlstr, topicID)
	q, err := db.Query(sqlstr, topicID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RelTopicCategory{}
	for q.Next() {
		rtc := RelTopicCategory{
			_exists: true,
		}

		// scan
		err = q.Scan(&rtc.TopicID, &rtc.CategoryID, &rtc.CreatedAt, &rtc.DeletedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &rtc)
	}

	return res, nil
}
