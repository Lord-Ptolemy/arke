// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"

	"github.com/lib/pq"
)

// Login represents a row from 'public.logins'.
type Login struct {
	Snowflake  int64       `json:"snowflake"`  // snowflake
	CreatedAt  *time.Time  `json:"created_at"` // created_at
	DeletedAt  pq.NullTime `json:"deleted_at"` // deleted_at
	UserID     int64       `json:"user_id"`    // user_id
	Type       int         `json:"type"`       // type
	Data       []byte      `json:"data"`       // data
	Identifier string      `json:"identifier"` // identifier

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Login exists in the database.
func (l *Login) Exists() bool {
	return l._exists
}

// Deleted provides information if the Login has been deleted from the database.
func (l *Login) Deleted() bool {
	return l._deleted
}

// Insert inserts the Login to the database.
func (l *Login) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.logins (` +
		`snowflake, created_at, deleted_at, user_id, type, data, identifier` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)`

	// run query
	XOLog(sqlstr, l.Snowflake, l.CreatedAt, l.DeletedAt, l.UserID, l.Type, l.Data, l.Identifier)
	err = db.QueryRow(sqlstr, l.Snowflake, l.CreatedAt, l.DeletedAt, l.UserID, l.Type, l.Data, l.Identifier).Scan(&l.Snowflake)
	if err != nil {
		return err
	}

	// set existence
	l._exists = true

	return nil
}

// Update updates the Login in the database.
func (l *Login) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if l._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.logins SET (` +
		`created_at, deleted_at, user_id, type, data, identifier` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE snowflake = $7`

	// run query
	XOLog(sqlstr, l.CreatedAt, l.DeletedAt, l.UserID, l.Type, l.Data, l.Identifier, l.Snowflake)
	_, err = db.Exec(sqlstr, l.CreatedAt, l.DeletedAt, l.UserID, l.Type, l.Data, l.Identifier, l.Snowflake)
	return err
}

// Save saves the Login to the database.
func (l *Login) Save(db XODB) error {
	if l.Exists() {
		return l.Update(db)
	}

	return l.Insert(db)
}

// Upsert performs an upsert for Login.
//
// NOTE: PostgreSQL 9.5+ only
func (l *Login) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.logins (` +
		`snowflake, created_at, deleted_at, user_id, type, data, identifier` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (snowflake) DO UPDATE SET (` +
		`snowflake, created_at, deleted_at, user_id, type, data, identifier` +
		`) = (` +
		`EXCLUDED.snowflake, EXCLUDED.created_at, EXCLUDED.deleted_at, EXCLUDED.user_id, EXCLUDED.type, EXCLUDED.data, EXCLUDED.identifier` +
		`)`

	// run query
	XOLog(sqlstr, l.Snowflake, l.CreatedAt, l.DeletedAt, l.UserID, l.Type, l.Data, l.Identifier)
	_, err = db.Exec(sqlstr, l.Snowflake, l.CreatedAt, l.DeletedAt, l.UserID, l.Type, l.Data, l.Identifier)
	if err != nil {
		return err
	}

	// set existence
	l._exists = true

	return nil
}

// Delete deletes the Login from the database.
func (l *Login) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return nil
	}

	// if deleted, bail
	if l._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.logins WHERE snowflake = $1`

	// run query
	XOLog(sqlstr, l.Snowflake)
	_, err = db.Exec(sqlstr, l.Snowflake)
	if err != nil {
		return err
	}

	// set deleted
	l._deleted = true

	return nil
}

// User returns the User associated with the Login's UserID (user_id).
//
// Generated from foreign key 'logins_user_id_fkey'.
func (l *Login) User(db XODB) (*User, error) {
	return UserBySnowflake(db, l.UserID)
}

// LoginsByIdentifier retrieves a row from 'public.logins' as a Login.
//
// Generated from index 'logins_identifier_index'.
func LoginsByIdentifier(db XODB, identifier string) ([]*Login, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, user_id, type, data, identifier ` +
		`FROM public.logins ` +
		`WHERE identifier = $1`

	// run query
	XOLog(sqlstr, identifier)
	q, err := db.Query(sqlstr, identifier)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Login{}
	for q.Next() {
		l := Login{
			_exists: true,
		}

		// scan
		err = q.Scan(&l.Snowflake, &l.CreatedAt, &l.DeletedAt, &l.UserID, &l.Type, &l.Data, &l.Identifier)
		if err != nil {
			return nil, err
		}

		res = append(res, &l)
	}

	return res, nil
}

// LoginByIdentifier retrieves a row from 'public.logins' as a Login.
//
// Generated from index 'logins_identifier_key'.
func LoginByIdentifier(db XODB, identifier string) (*Login, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, user_id, type, data, identifier ` +
		`FROM public.logins ` +
		`WHERE identifier = $1`

	// run query
	XOLog(sqlstr, identifier)
	l := Login{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, identifier).Scan(&l.Snowflake, &l.CreatedAt, &l.DeletedAt, &l.UserID, &l.Type, &l.Data, &l.Identifier)
	if err != nil {
		return nil, err
	}

	return &l, nil
}

// LoginsByUserID retrieves a row from 'public.logins' as a Login.
//
// Generated from index 'logins_login_user_index'.
func LoginsByUserID(db XODB, userID int64) ([]*Login, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, user_id, type, data, identifier ` +
		`FROM public.logins ` +
		`WHERE user_id = $1`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Login{}
	for q.Next() {
		l := Login{
			_exists: true,
		}

		// scan
		err = q.Scan(&l.Snowflake, &l.CreatedAt, &l.DeletedAt, &l.UserID, &l.Type, &l.Data, &l.Identifier)
		if err != nil {
			return nil, err
		}

		res = append(res, &l)
	}

	return res, nil
}

// LoginBySnowflake retrieves a row from 'public.logins' as a Login.
//
// Generated from index 'logins_pkey'.
func LoginBySnowflake(db XODB, snowflake int64) (*Login, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, user_id, type, data, identifier ` +
		`FROM public.logins ` +
		`WHERE snowflake = $1`

	// run query
	XOLog(sqlstr, snowflake)
	l := Login{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, snowflake).Scan(&l.Snowflake, &l.CreatedAt, &l.DeletedAt, &l.UserID, &l.Type, &l.Data, &l.Identifier)
	if err != nil {
		return nil, err
	}

	return &l, nil
}

// LoginsByType retrieves a row from 'public.logins' as a Login.
//
// Generated from index 'logins_type_index'.
func LoginsByType(db XODB, typ int) ([]*Login, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, user_id, type, data, identifier ` +
		`FROM public.logins ` +
		`WHERE type = $1`

	// run query
	XOLog(sqlstr, typ)
	q, err := db.Query(sqlstr, typ)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Login{}
	for q.Next() {
		l := Login{
			_exists: true,
		}

		// scan
		err = q.Scan(&l.Snowflake, &l.CreatedAt, &l.DeletedAt, &l.UserID, &l.Type, &l.Data, &l.Identifier)
		if err != nil {
			return nil, err
		}

		res = append(res, &l)
	}

	return res, nil
}
