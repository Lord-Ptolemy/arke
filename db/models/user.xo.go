// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/lib/pq"
)

// User represents a row from 'public.users'.
type User struct {
	Snowflake int64          `json:"snowflake"`  // snowflake
	CreatedAt *time.Time     `json:"created_at"` // created_at
	DeletedAt pq.NullTime    `json:"deleted_at"` // deleted_at
	Username  string         `json:"username"`   // username
	Email     sql.NullString `json:"email"`      // email
	Avatar    []byte         `json:"avatar"`     // avatar

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.users (` +
		`snowflake, created_at, deleted_at, username, email, avatar` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`

	// run query
	XOLog(sqlstr, u.Snowflake, u.CreatedAt, u.DeletedAt, u.Username, u.Email, u.Avatar)
	err = db.QueryRow(sqlstr, u.Snowflake, u.CreatedAt, u.DeletedAt, u.Username, u.Email, u.Avatar).Scan(&u.Snowflake)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.users SET (` +
		`created_at, deleted_at, username, email, avatar` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE snowflake = $6`

	// run query
	XOLog(sqlstr, u.CreatedAt, u.DeletedAt, u.Username, u.Email, u.Avatar, u.Snowflake)
	_, err = db.Exec(sqlstr, u.CreatedAt, u.DeletedAt, u.Username, u.Email, u.Avatar, u.Snowflake)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for User.
//
// NOTE: PostgreSQL 9.5+ only
func (u *User) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.users (` +
		`snowflake, created_at, deleted_at, username, email, avatar` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (snowflake) DO UPDATE SET (` +
		`snowflake, created_at, deleted_at, username, email, avatar` +
		`) = (` +
		`EXCLUDED.snowflake, EXCLUDED.created_at, EXCLUDED.deleted_at, EXCLUDED.username, EXCLUDED.email, EXCLUDED.avatar` +
		`)`

	// run query
	XOLog(sqlstr, u.Snowflake, u.CreatedAt, u.DeletedAt, u.Username, u.Email, u.Avatar)
	_, err = db.Exec(sqlstr, u.Snowflake, u.CreatedAt, u.DeletedAt, u.Username, u.Email, u.Avatar)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.users WHERE snowflake = $1`

	// run query
	XOLog(sqlstr, u.Snowflake)
	_, err = db.Exec(sqlstr, u.Snowflake)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// UsersByEmail retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_email_index'.
func UsersByEmail(db XODB, email sql.NullString) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, username, email, avatar ` +
		`FROM public.users ` +
		`WHERE email = $1`

	// run query
	XOLog(sqlstr, email)
	q, err := db.Query(sqlstr, email)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.Snowflake, &u.CreatedAt, &u.DeletedAt, &u.Username, &u.Email, &u.Avatar)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UserByEmail retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_email_key'.
func UserByEmail(db XODB, email sql.NullString) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, username, email, avatar ` +
		`FROM public.users ` +
		`WHERE email = $1`

	// run query
	XOLog(sqlstr, email)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&u.Snowflake, &u.CreatedAt, &u.DeletedAt, &u.Username, &u.Email, &u.Avatar)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserBySnowflake retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_pkey'.
func UserBySnowflake(db XODB, snowflake int64) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, username, email, avatar ` +
		`FROM public.users ` +
		`WHERE snowflake = $1`

	// run query
	XOLog(sqlstr, snowflake)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, snowflake).Scan(&u.Snowflake, &u.CreatedAt, &u.DeletedAt, &u.Username, &u.Email, &u.Avatar)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UsersByUsername retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_username_index'.
func UsersByUsername(db XODB, username string) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, username, email, avatar ` +
		`FROM public.users ` +
		`WHERE username = $1`

	// run query
	XOLog(sqlstr, username)
	q, err := db.Query(sqlstr, username)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.Snowflake, &u.CreatedAt, &u.DeletedAt, &u.Username, &u.Email, &u.Avatar)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UserByUsername retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_username_key'.
func UserByUsername(db XODB, username string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, username, email, avatar ` +
		`FROM public.users ` +
		`WHERE username = $1`

	// run query
	XOLog(sqlstr, username)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, username).Scan(&u.Snowflake, &u.CreatedAt, &u.DeletedAt, &u.Username, &u.Email, &u.Avatar)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
