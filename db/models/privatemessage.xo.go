// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/lib/pq"
)

// PrivateMessage represents a row from 'public.private_messages'.
type PrivateMessage struct {
	Snowflake  int64         `json:"snowflake"`   // snowflake
	CreatedAt  *time.Time    `json:"created_at"`  // created_at
	DeletedAt  pq.NullTime   `json:"deleted_at"`  // deleted_at
	Title      string        `json:"title"`       // title
	Body       string        `json:"body"`        // body
	SenderID   int64         `json:"sender_id"`   // sender_id
	ReceiverID int64         `json:"receiver_id"` // receiver_id
	ParentID   sql.NullInt64 `json:"parent_id"`   // parent_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PrivateMessage exists in the database.
func (pm *PrivateMessage) Exists() bool {
	return pm._exists
}

// Deleted provides information if the PrivateMessage has been deleted from the database.
func (pm *PrivateMessage) Deleted() bool {
	return pm._deleted
}

// Insert inserts the PrivateMessage to the database.
func (pm *PrivateMessage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.private_messages (` +
		`snowflake, created_at, deleted_at, title, body, sender_id, receiver_id, parent_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`

	// run query
	XOLog(sqlstr, pm.Snowflake, pm.CreatedAt, pm.DeletedAt, pm.Title, pm.Body, pm.SenderID, pm.ReceiverID, pm.ParentID)
	err = db.QueryRow(sqlstr, pm.Snowflake, pm.CreatedAt, pm.DeletedAt, pm.Title, pm.Body, pm.SenderID, pm.ReceiverID, pm.ParentID).Scan(&pm.Snowflake)
	if err != nil {
		return err
	}

	// set existence
	pm._exists = true

	return nil
}

// Update updates the PrivateMessage in the database.
func (pm *PrivateMessage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.private_messages SET (` +
		`created_at, deleted_at, title, body, sender_id, receiver_id, parent_id` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE snowflake = $8`

	// run query
	XOLog(sqlstr, pm.CreatedAt, pm.DeletedAt, pm.Title, pm.Body, pm.SenderID, pm.ReceiverID, pm.ParentID, pm.Snowflake)
	_, err = db.Exec(sqlstr, pm.CreatedAt, pm.DeletedAt, pm.Title, pm.Body, pm.SenderID, pm.ReceiverID, pm.ParentID, pm.Snowflake)
	return err
}

// Save saves the PrivateMessage to the database.
func (pm *PrivateMessage) Save(db XODB) error {
	if pm.Exists() {
		return pm.Update(db)
	}

	return pm.Insert(db)
}

// Upsert performs an upsert for PrivateMessage.
//
// NOTE: PostgreSQL 9.5+ only
func (pm *PrivateMessage) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if pm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.private_messages (` +
		`snowflake, created_at, deleted_at, title, body, sender_id, receiver_id, parent_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (snowflake) DO UPDATE SET (` +
		`snowflake, created_at, deleted_at, title, body, sender_id, receiver_id, parent_id` +
		`) = (` +
		`EXCLUDED.snowflake, EXCLUDED.created_at, EXCLUDED.deleted_at, EXCLUDED.title, EXCLUDED.body, EXCLUDED.sender_id, EXCLUDED.receiver_id, EXCLUDED.parent_id` +
		`)`

	// run query
	XOLog(sqlstr, pm.Snowflake, pm.CreatedAt, pm.DeletedAt, pm.Title, pm.Body, pm.SenderID, pm.ReceiverID, pm.ParentID)
	_, err = db.Exec(sqlstr, pm.Snowflake, pm.CreatedAt, pm.DeletedAt, pm.Title, pm.Body, pm.SenderID, pm.ReceiverID, pm.ParentID)
	if err != nil {
		return err
	}

	// set existence
	pm._exists = true

	return nil
}

// Delete deletes the PrivateMessage from the database.
func (pm *PrivateMessage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pm._exists {
		return nil
	}

	// if deleted, bail
	if pm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.private_messages WHERE snowflake = $1`

	// run query
	XOLog(sqlstr, pm.Snowflake)
	_, err = db.Exec(sqlstr, pm.Snowflake)
	if err != nil {
		return err
	}

	// set deleted
	pm._deleted = true

	return nil
}

// PrivateMessage returns the PrivateMessage associated with the PrivateMessage's ParentID (parent_id).
//
// Generated from foreign key 'private_messages_parent_id_fkey'.
func (pm *PrivateMessage) PrivateMessage(db XODB) (*PrivateMessage, error) {
	return PrivateMessageBySnowflake(db, pm.ParentID.Int64)
}

// UserByReceiverID returns the User associated with the PrivateMessage's ReceiverID (receiver_id).
//
// Generated from foreign key 'private_messages_receiver_id_fkey'.
func (pm *PrivateMessage) UserByReceiverID(db XODB) (*User, error) {
	return UserBySnowflake(db, pm.ReceiverID)
}

// UserBySenderID returns the User associated with the PrivateMessage's SenderID (sender_id).
//
// Generated from foreign key 'private_messages_sender_id_fkey'.
func (pm *PrivateMessage) UserBySenderID(db XODB) (*User, error) {
	return UserBySnowflake(db, pm.SenderID)
}

// PrivateMessagesBySenderIDReceiverID retrieves a row from 'public.private_messages' as a PrivateMessage.
//
// Generated from index 'private_messages_compair_index'.
func PrivateMessagesBySenderIDReceiverID(db XODB, senderID int64, receiverID int64) ([]*PrivateMessage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, title, body, sender_id, receiver_id, parent_id ` +
		`FROM public.private_messages ` +
		`WHERE sender_id = $1 AND receiver_id = $2`

	// run query
	XOLog(sqlstr, senderID, receiverID)
	q, err := db.Query(sqlstr, senderID, receiverID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrivateMessage{}
	for q.Next() {
		pm := PrivateMessage{
			_exists: true,
		}

		// scan
		err = q.Scan(&pm.Snowflake, &pm.CreatedAt, &pm.DeletedAt, &pm.Title, &pm.Body, &pm.SenderID, &pm.ReceiverID, &pm.ParentID)
		if err != nil {
			return nil, err
		}

		res = append(res, &pm)
	}

	return res, nil
}

// PrivateMessagesByParentID retrieves a row from 'public.private_messages' as a PrivateMessage.
//
// Generated from index 'private_messages_parent_index'.
func PrivateMessagesByParentID(db XODB, parentID sql.NullInt64) ([]*PrivateMessage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, title, body, sender_id, receiver_id, parent_id ` +
		`FROM public.private_messages ` +
		`WHERE parent_id = $1`

	// run query
	XOLog(sqlstr, parentID)
	q, err := db.Query(sqlstr, parentID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrivateMessage{}
	for q.Next() {
		pm := PrivateMessage{
			_exists: true,
		}

		// scan
		err = q.Scan(&pm.Snowflake, &pm.CreatedAt, &pm.DeletedAt, &pm.Title, &pm.Body, &pm.SenderID, &pm.ReceiverID, &pm.ParentID)
		if err != nil {
			return nil, err
		}

		res = append(res, &pm)
	}

	return res, nil
}

// PrivateMessageBySnowflake retrieves a row from 'public.private_messages' as a PrivateMessage.
//
// Generated from index 'private_messages_pkey'.
func PrivateMessageBySnowflake(db XODB, snowflake int64) (*PrivateMessage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, title, body, sender_id, receiver_id, parent_id ` +
		`FROM public.private_messages ` +
		`WHERE snowflake = $1`

	// run query
	XOLog(sqlstr, snowflake)
	pm := PrivateMessage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, snowflake).Scan(&pm.Snowflake, &pm.CreatedAt, &pm.DeletedAt, &pm.Title, &pm.Body, &pm.SenderID, &pm.ReceiverID, &pm.ParentID)
	if err != nil {
		return nil, err
	}

	return &pm, nil
}

// PrivateMessagesBySenderID retrieves a row from 'public.private_messages' as a PrivateMessage.
//
// Generated from index 'private_messages_sender_index'.
func PrivateMessagesBySenderID(db XODB, senderID int64) ([]*PrivateMessage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`snowflake, created_at, deleted_at, title, body, sender_id, receiver_id, parent_id ` +
		`FROM public.private_messages ` +
		`WHERE sender_id = $1`

	// run query
	XOLog(sqlstr, senderID)
	q, err := db.Query(sqlstr, senderID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrivateMessage{}
	for q.Next() {
		pm := PrivateMessage{
			_exists: true,
		}

		// scan
		err = q.Scan(&pm.Snowflake, &pm.CreatedAt, &pm.DeletedAt, &pm.Title, &pm.Body, &pm.SenderID, &pm.ReceiverID, &pm.ParentID)
		if err != nil {
			return nil, err
		}

		res = append(res, &pm)
	}

	return res, nil
}
