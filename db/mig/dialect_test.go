package mig

import (
	"database/sql"
	"errors"
	"fmt"
	"github.com/spf13/viper"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestOpenFromPGConn(t *testing.T) {
	if OpenFromPGConn(nil) == nil {
		t.Log("Cannot return nil PGSQL Dialect")
		t.Fail()
	}
}

func TestPostgresDialect_MarkExecuted(t *testing.T) {

	mockDB := new(minimalDBMock)
	dialect := &PostgresDialect{
		db: mockDB,
	}

	mockDB.On("Exec",
		"INSERT INTO vape_migrations (name, type) VALUES\n($1, $2)\n;",
		[]interface{}{"test-unit", "migration"}).Return(nil, nil)

	dialect.MarkExecuted(Unit{
		Type:       UnitTypeMigration,
		AlwaysExec: true,
	})

	dialect.MarkExecuted(Unit{
		Name: "test-unit",
		Type: UnitTypeMigration,
	})

	if !mockDB.AssertExpectations(t) {
		return
	}
	mockDB.AssertCalled(t, "Exec",
		"INSERT INTO vape_migrations (name, type) VALUES\n($1, $2)\n;",
		[]interface{}{"test-unit", "migration"})
	mockDB.AssertNumberOfCalls(t, "Exec", 1)
}

func TestPostgresDialect(t *testing.T) {

	assert := require.New(t)

	db, err := sql.Open("postgres", "postgres://localhost/doesnotexist?sslmode=disable")
	if err != nil {
		return
	}

	dialect := OpenFromPGConn(db)
	assert.Error(dialect.CheckAndLoadTables())

	var connString string

	if !viper.IsSet("POSTGRES_HOST") {
		t.Log("DB not set, aborting Database Test")
		return
	}

	if viper.IsSet("POSTGRES_PASS") && len(viper.GetString("POSTGRES_PASS")) > 0 {
		connString = fmt.Sprintf(
			"postgres://%s:%s@%s/?sslmode=disable",
			viper.Get("POSTGRES_USER"),
			viper.Get("POSTGRES_PASS"),
			viper.Get("POSTGRES_HOST"),
		)
	} else {
		connString = fmt.Sprintf(
			"postgres://%s@%s/?sslmode=disable",
			viper.Get("POSTGRES_USER"),
			viper.Get("POSTGRES_HOST"),
		)
	}
	db, err = sql.Open("postgres", connString)
	assert.NoError(err)
	if err != nil {
		return
	}

	dialect = OpenFromPGConn(db)
	assert.NoError(dialect.CheckAndLoadTables())

	mockDB := new(minimalDBMock)

	mockDB.On("Ping").Return(nil)
	mockDB.On("Begin").Return(nil, errors.New("Test error"))

	dialect = &PostgresDialect{
		db: mockDB,
	}

	assert.Error(dialect.CheckAndLoadTables())

	if !mockDB.AssertExpectations(t) {
		return
	}

	tx, err := db.Begin()
	if err != nil {
		t.Fail()
		return
	}
	tx.Rollback()

	mockDB = new(minimalDBMock)
	dialect = &PostgresDialect{
		db: mockDB,
	}

	mockDB.On("Ping").Return(nil)
	mockDB.On("Begin").Return(tx, nil)

	assert.Error(dialect.CheckAndLoadTables())

	if !mockDB.AssertExpectations(t) {
		return
	}

	mockDB = new(minimalDBMock)
	dialect = &PostgresDialect{
		db: mockDB,
	}

	mockDB.On("Query", "SELECT name FROM vape_migrations WHERE type=$1;", []interface{}{"migration"}).Return((*sql.Rows)(nil), errors.New("Test error"))

	_, err = dialect.GetExecutedUnits()

	if !mockDB.AssertExpectations(t) {
		return
	}
	assert.Error(err)

	mockDB = new(minimalDBMock)
	dialect = &PostgresDialect{
		db: mockDB,
	}

	res, err := db.Query("SELECT 1,1;")
	assert.NoError(err)

	mockDB.On("Query", "SELECT name FROM vape_migrations WHERE type=$1;", []interface{}{"migration"}).Return(res, nil)

	_, err = dialect.GetExecutedUnits()

	if !mockDB.AssertExpectations(t) {
		return
	}
	assert.Error(err)
}

/* -- Mockery Autogenerated Stub -- */

// minimalDB is an autogenerated mock type for the minimalDB type
type minimalDBMock struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *minimalDBMock) Begin() (*sql.Tx, error) {
	ret := _m.Called()

	var r0 *sql.Tx
	if rf, ok := ret.Get(0).(func() *sql.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exec provides a mock function with given fields: _a0, _a1
func (_m *minimalDBMock) Exec(_a0 string, _a1 ...interface{}) (sql.Result, error) {
	ret := _m.Called(_a0, _a1)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *minimalDBMock) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: _a0, _a1
func (_m *minimalDBMock) Query(_a0 string, _a1 ...interface{}) (*sql.Rows, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sql.Rows
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Rows); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Get(0).(*sql.Rows)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ minimalDB = (*minimalDBMock)(nil)
